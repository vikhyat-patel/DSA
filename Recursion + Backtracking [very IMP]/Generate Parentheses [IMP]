Time - O(2^n) & Space - O(n) - recursive solution..

class Solution {
private:  
void helper(vector<string> &ans, int open_cnt, int closed_cnt, string op){
    // when the counts of both open & closed becomes zero we simply push the string in our ans.
     if(open_cnt == 0 && closed_cnt == 0){
         ans.push_back(op);
         return;
     }
     // when the open and closed counts are equal, we always take open bracket.
     if(open_cnt == closed_cnt){
         string op1 = op;
         op1.push_back('(');
         helper(ans, open_cnt - 1, closed_cnt, op1);
     }
     else if(open_cnt == 0){
         string op1 = op;
         op1.push_back(')');
         helper(ans, open_cnt, closed_cnt - 1, op1);
     }
     else{
         string op1 = op;
         string op2 = op;
         op1.push_back('(');
         op2.push_back(')');
         helper(ans, open_cnt - 1, closed_cnt, op1);
         helper(ans, open_cnt, closed_cnt - 1, op2);
     }
}
  
public:
    vector<string> generateParenthesis(int n) {
        vector<string> ans;

        int open_cnt = n;
        int closed_cnt = n;
        string op = "";

        helper(ans, open_cnt, closed_cnt, op);

        return ans;
    }
};
