class Solution{
  public:
  // Function to find the mid of linked list..
    Node* middle(Node* head){
      Node* fast=head;
      Node* slow=head;
      while(fast!=NULL&&fast->next!=NULL){
          slow=slow->next;
          fast=fast->next->next;
      }
      if(fast!=NULL)
      return slow->next;
      else
      return slow;
    }
    // Function to reverse the half linked list..
    Node* reverse(Node* mid){
      Node* current=mid;
      Node* prev=NULL;
      while(current!=NULL){
         Node* temp=current->next;
         current->next=prev;
         prev=current;
         current=temp;
      }
      return prev;
    }
    
    //Function to check whether the list is palindrome...O(N) & O(1)
    bool isPalindrome(Node *head)
    {
     Node* mid=middle(head);
     Node* new_head=reverse(mid);
     while(new_head!=NULL){
       if(new_head->data==head->data){
           head=head->next;
           new_head=new_head->next;
       }
       else
       return false;
     }
     return true;
    }
};
