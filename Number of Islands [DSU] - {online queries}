class Disjointset
{
public:
vector<int> parent, size;
    Disjointset(int n){
        parent.resize(n + 1);
        size.resize(n + 1);
        for(int i = 0; i <= n; i++){
        parent[i] = i;
        size[i] = 1;
        }
    } 

    int findupar(int node){
        if(node == parent[node]) return node;
        return parent[node] = findupar(parent[node]);
    }
    
    void unionbysize(int u, int v){
        int ulp_u = findupar(u);
        int ulp_v = findupar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] > size[ulp_v]){
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
        else{
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
    }
};
class Solution {
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        Disjointset ds(n * m);
        vector<int> islands;
        vector<vector<int>> vis(n, vector<int> (m, 0));
        
        int delrow[] = {-1, 0, 1, 0};
        int delcol[] = {0, 1, 0, -1};
        int cnt = 0;
        
        for(auto it : operators){
            int row = it[0];
            int col = it[1];
            
            if(vis[row][col] == 1){
                islands.push_back(cnt);
                continue;
            }
            
            vis[row][col] = 1;
            cnt++;
            
            for(int i = 0; i < 4; i++){
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];
                
                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m){
                    if(vis[nrow][ncol] == 1){
                        int nodeN = (row * m) + col;
                        int adjnodeN = (nrow * m) + ncol;
                        if(ds.findupar(nodeN) != ds.findupar(adjnodeN)){
                            cnt--;
                            ds.unionbysize(nodeN, adjnodeN);
                        }
                    }
                }
            }
            islands.push_back(cnt);
        }
       
        return islands;
    }
};
