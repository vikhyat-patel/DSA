// It is similar to no of islands problem but there we used BFS..here we used DFS to store the shapes of the islands in a SET..
// finally returning the SET size gives us total distinct islands...O(N*M) & O(N*M).

class Solution {
private:
void dfs(int row, int col, vector<vector<int>> &grid, vector<vector<int>> &vis,
vector<pair<int,int>> &v, int baserow, int basecol){
    int n = grid.size();
    int m = grid[0].size();
    vis[row][col] = 1;
    v.push_back({row-baserow,col-basecol});
    int delrow[]={-1,0,1,0};
    int delcol[]={0,1,0,-1};
    for(int i=0;i<4;i++){
        int nrow = row + delrow[i];
        int ncol = col + delcol[i];
        if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m&&grid[nrow][ncol]==1&&!vis[nrow][ncol]){
            dfs(nrow,ncol,grid,vis,v,baserow,basecol);
        }
    }
}
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m,0));
        set<vector<pair<int,int>>> st;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && !vis[i][j]){
                    vector<pair<int,int>> v;
                    dfs(i,j,grid,vis,v,i,j);
                    st.insert(v);
                }
            }
        }
        int Dislands = st.size();
        return Dislands;
    }
};
