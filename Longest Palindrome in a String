//// DP SOLUTION - O(N^2) & O(N^2)

class Solution {
  public:
    string longestPalin (string s) {
        
        int n = s.size();
        int maxLength = 1; // At least one character is a palindrome
        int start = 0;     // Starting index of the longest palindromic substring

        // Initialize the table for dynamic programming
        vector<vector<bool>> dp(n, vector<bool>(n, false));

        // Every single character is a palindrome
        for (int i = 0; i < n; ++i) {
            dp[i][i] = true;
        }

        // Check for substrings of length 2
        for (int i = 0; i < n - 1; ++i) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = true;
                if(maxLength < 2){
                    maxLength = 2;
                    start = i;
                }
            }
        }

        // Check for lengths greater than 2
        for (int len = 3; len <= n; ++len) {
            for (int i = 0; i <= n - len; ++i) {
                int j = i + len - 1;

                if (s[i] == s[j] && dp[i + 1][j - 1]) {
                    dp[i][j] = true;
                    if (len > maxLength) {
                        maxLength = len;
                        start = i;
                    }
                }
            }
        }

        return s.substr(start, maxLength);
    }
};


//// O(N^2) & O(1) SOLUTION - appoach is that we are expanding from the centre to left and right...

class Solution {
  public:
    string longestPalin (string s) {
        
        int n = s.size();
        int start = 0;
        int maxLength = 1;

       // for Odd lengths palindrome...
        for(int i = 0; i < n; i++){
            
            int l = i, r = i;
            
            while(l >= 0 && r < n){
                if(s[l] == s[r]){
                    l--;
                    r++;
                }
                else
                break;
            }
            
            int len = r - l - 1;
            if(len > maxLength){
                maxLength = len;
                start = l + 1;
            }
            
        }

        // for Even lengths palindrome...
        for(int i = 0; i < n - 1; i++){
            
            int l = i, r = i + 1;
            
            while(l >= 0 && r < n){
                if(s[l] == s[r]){
                    l--;
                    r++;
                }
                else
                break;
            }
            
            int len = r - l - 1;
            if(len > maxLength){
                maxLength = len;
                start = l + 1;
            }
            
        }
        
        return s.substr(start, maxLength);
    }
};
