class Solution                   // O(N) & O(N) Soln..
{
private:
Node* inorder(Node* root, int target){
    if(root==NULL)
    return NULL;
    if(root->data==target)
    return root;
    Node* left = inorder(root->left,target);
    Node* right = inorder(root->right,target);
    if(left!=NULL)
    return left;
    if(right!=NULL)
    return right;
}
private:
void storeParents(Node* root, map<Node*,Node*> &parent_track){
    queue<Node*> q;
    q.push(root);
    while(!q.empty()){
        Node* curr = q.front();
        q.pop();
        if(curr->left){
            q.push(curr->left);
            parent_track[curr->left]=curr;
        }
        if(curr->right){
            q.push(curr->right);
            parent_track[curr->right]=curr;
        }
    }
}
public:
    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
       Node* tar = inorder(root,target);
       map<Node*,Node*> parent_track;
       storeParents(root,parent_track);
       map<Node*,bool> visited;
       queue<Node*> q;
       q.push(tar);
       visited[tar]=true;
       int curr_level=0;
       while(!q.empty()){
          int size=q.size(); 
          if(curr_level==k)
          break;
          curr_level++;
          for(int i=0;i<size;i++){
          Node* curr = q.front();
          q.pop();
          if(curr->left&&!visited[curr->left]){
              q.push(curr->left);
              visited[curr->left]=true;
          }
          if(curr->right&&!visited[curr->right]){
              q.push(curr->right);
              visited[curr->right]=true;
          }
          if(parent_track[curr]&&!visited[parent_track[curr]]){
              q.push(parent_track[curr]);
              visited[parent_track[curr]]=true;
          }
       }
       }
       vector<int> v;
       while(!q.empty()){
           Node* tem = q.front();
           q.pop();
           v.push_back(tem->data);
       }
       sort(v.begin(),v.end());
       return v;
    }
};
