//  Using SET approach..

//Function to find the shortest distance of all the vertices from the source vertex..
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int source)
    {
        set<pair<int,int>> st;
        vector<int> distance(V, 1e9);
        distance[source] = 0;
        st.insert({0, source});
        while(!st.empty()){
            auto it = st.begin();
            int dis = it->first;
            int node = it->second;
            st.erase(it);
            for(auto i : adj[node]){
                int adjnode = i[0];
                int wt = i[1];
                if((dis + wt)<distance[adjnode]){
                    // if it existed before..
                    if(distance[adjnode]!=1e9)
                    st.erase({distance[adjnode], adjnode});
                    
                    distance[adjnode] = dis + wt;
                    st.insert({distance[adjnode], adjnode});
                }
            }
        }
        return distance;
    }


//  Using Priority queue.... O(Elog(V)) & O(V) ..very very IMP..learn it by heart.

class Solution
{
public:
    // Function to find the shortest distance of all the vertices
    // from the source vertex S.
    vector<int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {

        // Create a priority queue for storing the nodes as a pair {dist,node}
        // where dist is the distance from source to the node. 
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        // Initialising distTo list with a large number to
        // indicate the nodes are unvisited initially.
        // This list contains distance from source to the nodes.
        vector<int> distTo(V, INT_MAX);

        // Source initialised with dist=0.
        distTo[S] = 0;
        pq.push({0, S});

        // Now, pop the minimum distance node first from the min-heap
        // and traverse for all its adjacent nodes.
        while (!pq.empty())
        {
            int node = pq.top().second;
            int dis = pq.top().first;
            pq.pop();

            // Check for all adjacent nodes of the popped out
            // element whether the prev dist is larger than current or not.
            for (auto it : adj[node])
            {
                int v = it[0];
                int w = it[1];
                if (dis + w < distTo[v])
                {
                    distTo[v] = dis + w;
    
                    // If current distance is smaller,
                    // push it into the queue.
                    pq.push({dis + w, v});
                }
            }
        }
        // Return the list containing shortest distances
        // from source to all the nodes.
        return distTo;
    }
};
