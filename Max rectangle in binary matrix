/*You are required to complete this method*/

class Solution{
private:
int helper(vector<int> heights){

      int n = heights.size();
      stack < int > st;
      vector<int> leftsmall, rightsmall;

      for (int i = 0; i < n; i++) {
        while (!st.empty() && heights[st.top()] >= heights[i]) {
          st.pop();
        }
        if (st.empty())
          leftsmall.push_back(0);
        else
         leftsmall.push_back(st.top() + 1);
        st.push(i);
      }

      // clear the stack to be re-used
      while (!st.empty())
        st.pop();

      for (int i = n - 1; i >= 0; i--) {
        while (!st.empty() && heights[st.top()] >= heights[i])
          st.pop();

        if (st.empty())
          rightsmall.push_back(n - 1);
        else
          rightsmall.push_back(st.top() - 1);

        st.push(i);
      }
      
      reverse(rightsmall.begin(), rightsmall.end());
      
      int maxA = 0;
      for (int i = 0; i < n; i++) {
        maxA = max(maxA, heights[i] * (rightsmall[i] - leftsmall[i] + 1));
      }

      return maxA;
}

  public:
    int maxArea(int mat[MAX][MAX], int n, int m) {
        
        int max_area = 0;
        vector<int> hist(m, 0);
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                
                if(mat[i][j] == 1) 
                hist[j]++;
                else
                hist[j] = 0;
                
            }
            
            int area = helper(hist);
            max_area = max(max_area, area);
        }
        
        return max_area;
    }
};
