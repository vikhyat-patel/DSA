                       Course Schedule [1] --> Prerequisite Tasks ,,,,,O(M+N) & O(M+N)...

	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    vector<int> adj[N];
	    for(auto it : prerequisites){
	        int u = it.first;
	        int v = it.second;
	        adj[v].push_back(u);
	    }
	    vector<int> topo;
	    vector<int> indegree(N, 0);
	    for(int i=0;i<N;i++){
	        for(auto it : adj[i])
	        indegree[it]++;
	    }
	    queue<int> q;
	    for(int i=0;i<N;i++){
	        if(indegree[i]==0)
	        q.push(i);
	    }
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	        topo.push_back(node);
	        for(auto it : adj[node]){
	            indegree[it]--;
	            if(indegree[it]==0)
	            q.push(it);
	        }
	    }
	    if(topo.size()==N)
	    return true;
	    else
	    return false;
	}


                                         Course Schedule [2]  ,,,,,,,  O(M+N) & O(M+N)...

vector<int> findOrder(int n, int m, vector<vector<int>> prerequisites) 
    {
        vector<int> adj[n];
        for(auto it : prerequisites){
            int u = it[0];
            int v = it[1];
            adj[v].push_back(u);
        }
        vector<int> topo;
        vector<int> indegree(n, 0);
        for(int i=0;i<n;i++){
            for(auto it : adj[i])
            indegree[it]++;
        }
        queue<int> q;
        for(int i=0;i<n;i++){
           if(indegree[i]==0)
           q.push(i);
        }
        while(!q.empty()){
            int node = q.front();
            q.pop();
            topo.push_back(node);
            for(auto it : adj[node]){
                indegree[it]--;
                if(indegree[it]==0)
                q.push(it);
            }
        }
        if(topo.size()==n)
        return topo;
        else
        return {};
    }
