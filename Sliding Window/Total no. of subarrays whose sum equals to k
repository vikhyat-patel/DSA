Intuition -> O(N) & O(N),, but always try with the brute force first..

First, we will declare a map to store the prefix sums and their counts.
Then, we will set the value of 0 as 1 on the map. 
Then we will run a loop(say i) from index 0 to n-1 (n = size of the array).
For each index i, we will do the following:

We will add the current element i.e. arr[i] to the prefix sum.
We will calculate the prefix sum i.e. x-k, for which we need the occurrence.
We will add the occurrence of the prefix sum x-k i.e. mpp[x-k] to our answer.
Then we will store the current prefix sum in the map increasing its occurrence by 1.


int subarraySum(vector<int>& nums, int k) {
        int cnt = 0;
        int curr_sum = 0;
        unordered_map<int, int> mp;  // {storing the prefixsum, counts}
        mp[0] = 1;
 
        for(int i = 0; i < nums.size(); i++){
            curr_sum += nums[i];

                int rem = curr_sum - k;
                if(mp.find(rem) != mp.end()){
                    // Add the number of subarrays to be removed:
                    cnt += mp[rem];
                }

           // Update the count of prefix sum in the map.
            mp[curr_sum]++;
        }
        return cnt;
    }
