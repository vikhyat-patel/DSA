Optimal solution - O(n) & O(n) .. but start with the brute force solution at first...

int longSubarrWthSumDivByK(int arr[], int n, int k)
	{
	    int max_len = 0;
	    int curr_sum = 0;
	    unordered_map<int, int> mp;
	    
	    for(int j = 0; j < n; j++){
	        curr_sum += arr[j];
	        
	        int remainder = curr_sum % k;
	        
	        if(remainder < 0){
	            remainder += k;
	        }
	        
	        if(remainder == 0){
	            max_len = max(max_len, j + 1);
	        }
	        
	        if(mp.find(remainder) != mp.end()){
	            int len = j - mp[remainder];
	            max_len = max(max_len, len);
	        }
	        
	        if(mp.find(remainder) == mp.end()){
	            mp[remainder] = j;
	        }
	    }
	    
	    return max_len;
	}
