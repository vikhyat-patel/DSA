Optimal soln - O(n) & O(n) ... but try with the Brute force first...

int numberOfSubarrays(vector<int>& nums, int k) {
         
        // we are replacing all the odd numbers by 1 & all the even numbers by 0 in the array

         for(int i = 0; i < nums.size(); i++){
             if(nums[i] % 2 == 0){
                 nums[i] = 0;
             }
             else{
                 nums[i] = 1;
             }      
         }

        // Now the Question becomes count the total number of subarrays with sum = k
 
        int cnt = 0;
        int curr_sum = 0;
        unordered_map<int, int> mp;
        mp[0] = 1;

        for(int i = 0; i < nums.size(); i++){
            curr_sum += nums[i];

            int rem = curr_sum - k;

            if(mp.find(rem) != mp.end()){
                cnt += mp[rem];
            }

            mp[curr_sum]++;
        }

        return cnt;
    }
