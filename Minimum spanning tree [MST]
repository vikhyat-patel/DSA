//Function to find sum of weights of edges of the Minimum Spanning Tree [MST]---> PRIM'S Algorithm..O(ElogV) & O(V^2)..
//We can either use SET or create PRIORITY_QUEUE (MIN Heap)..

    int spanningTree(int V, vector<vector<int>> adj[])
    {
       // set<pair<int,int>> st;
       priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
       //st.insert({0,0});
       pq.push({0,0});
       int sum = 0;
       vector<int> vis(V,false);
       while(!pq.empty()){
           //auto it = st.begin();
           auto it = pq.top();
           int wt = it.first;
           int node = it.second;
           //st.erase(it);
           pq.pop();
           if(vis[node]==1)
           continue;
           else if(!vis[node]){
               vis[node] = true;
               sum += wt;
           }
           for(auto i : adj[node]){
              int adjnode = i[0];
              int dist = i[1];
              if(!vis[adjnode])
              pq.push({dist,adjnode});
           }
       }
       return sum;
    }


// KRUSKAL'S ALGORITHM...Disjoint SET/ Union by rank/ Union by size/ Path compression...VERY VERY IMP...O(E*logE) or O(E*logV) time..

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
       vector<pair<int,pair<int,int>>> v;
       for(int i=0;i<V;i++){
           for(auto it : adj[i]){
             int adjnode = it[0];
             int wt = it[1];
             int node = i;
             v.push_back({wt,{node,adjnode}});
           }
       }
       sort(v.begin(),v.end());   // wrt to the edge weight..
       
       DisjointSet ds(V);   // use of DisjointSet is very very useful and important..
       int mstweight = 0;

       for(auto it : v){
          int wt = it.first;
          int u = it.second.first;
          int v = it.second.second;
          
          if(ds.findUPar(u)!=ds.findUPar(v)){
              mstweight += wt;
              ds.unionByRank(u,v);
          }
       }
       return mstweight;
    }
};
