// Function to find sum of weights of edges of the Minimum Spanning Tree [MST] ---> PRIM'S Algorithm..O(ElogV) & O(V^2)..
// We can either use SET or create PRIORITY_QUEUE (MIN Heap)...
// here we follow the greedy intuition and add the edges with minimum weights step by step in the MST..

    int spanningTree(int V, vector<vector<int>> adj[])
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, 0});
        vector<int> vis(V, false);
        int sum = 0;
        
        while(!pq.empty()){
           int wt = pq.top().first;
           int node = pq.top().second;
           pq.pop();
           
           if(vis[node] == 1) continue;
           
           vis[node] = 1;
           sum += wt;
           
           for(auto it : adj[node]){
               int adjnode = it[0];
               int edw = it[1];
               if(!vis[adjnode]){
                   pq.push({edw, adjnode});
               }    
           }
        }
        return sum;
    }

// KRUSKAL'S ALGORITHM...Disjoint SET/ Union by rank/ Union by size/ Path compression...VERY VERY IMP...O(E*logE) or O(E*logV) time..

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
       vector<pair<int,pair<int,int>>> v;
       for(int i=0;i<V;i++){
           for(auto it : adj[i]){
             int adjnode = it[0];
             int wt = it[1];
             int node = i;
             v.push_back({wt,{node,adjnode}});
           }
       }
       sort(v.begin(),v.end());   // wrt to the edge weight..
       
       DisjointSet ds(V);   // use of DisjointSet is very very useful and important..
       int mstweight = 0;

       for(auto it : v){
          int wt = it.first;
          int u = it.second.first;
          int v = it.second.second;
          
          if(ds.findUPar(u)!=ds.findUPar(v)){
              mstweight += wt;
              ds.unionByRank(u,v);
          }
       }
       return mstweight;
    }
};
