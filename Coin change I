//  TO RETURN MIN NO OF COINS REQUIRED..(fewest number of coins that you need to make up that amount)  
COIN CHANGE II IS VERY EASY (GFG).

class Solution {
public:
int helper(int index, int target, vector<vector<int>> &dp, vector<int> &coins){
     if(index==0){
         if(target%coins[0]==0)
         return target/coins[0];
         else
         return 1e9;
     }
     if(dp[index][target]!=-1)
     return dp[index][target];
     int notTake = 0 + helper(index-1,target,dp,coins);
     int take = 1e9;
     if(coins[index]<=target)
     take = 1 + helper(index,target-coins[index],dp,coins);
     return dp[index][target] = min(take,notTake);
}
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>> dp(n,vector<int>(amount+1,-1));
        int ans = helper(n-1,amount,dp,coins);
        if(ans>=1e9)
        return -1;
        else
        return ans;
    }
};
