int isNegativeWeightCycle(int n, vector<vector<int>>edges){
	    if(n==1)   // base case
	    return 0;
	    vector<int> dist(n, 1e9);
	    int src = edges[0][0];     // we can't take src to be 0, we take a node which is guaranteed to lead somewhere..
	    dist[src] = 0;
                    // N-1 iterations make up the dist vector ready..
	    for(int i=0;i<n-1;i++){
	        for(auto it : edges){
	            int u = it[0];
	            int v = it[1];
	            int wt = it[2];
	            if(dist[u]!=1e9 && (wt + dist[u]) < dist[v])
	            dist[v] = dist[u] + wt;
	        }
	    } 
	                   // Nth iteration check for negative cycle..if dist values further reduces..
	    for(auto it : edges){
	        int u = it[0];
	        int v = it[1];
	        int wt = it[2];
	        if(dist[u]!=1e9 && (wt + dist[u]) < dist[v])
	        return 1;
	    }
	    return 0;
	}


BELLMAN FORD TIME COMPLEXITY - O(V*E) & O(V)...


   //  Function to implement Bellman Ford...
    *   edges: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices

    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
       vector<int> bellman(V, 1e8);
       bellman[S] = 0;
       for(int i=1;i<V;i++){
           for(auto it : edges){
              int u = it[0];
              int v = it[1];
              int wt = it[2];
              if(bellman[u]!=1e8 && (wt + bellman[u])<bellman[v]){
                  bellman[v] = wt + bellman[u];
              }
           }
       }
       for(auto it : edges){
              int u = it[0];
              int v = it[1];
              int wt = it[2];
              if(bellman[u]!=1e8 && (wt + bellman[u])<bellman[v]){
                  return {-1};   // Negative cycle..
            }
       }
       return bellman;
    }
