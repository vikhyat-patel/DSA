class Solution {
public:
    vector<int> getRow(int rowIndex) {
       vector<int> dp;
       dp.push_back(1);
       int temp=rowIndex;
       for(int i=1;i<=rowIndex;i++){
           long long int val=((long)dp[i-1]*(long)temp);
           val/=i;
           dp.push_back(val);
           temp--;
       }
       return dp;
    }
};
      // O(N) & O(N) -> utilising the Ncr concept...any element in pascals triangle can be (r-1)C(c-1)..[r-rows, c-columns]
 
 
      O(N^2) & O(N^2) -> can be very easy..
      Just taking the whole pascals triangle in a 2-D vector..and then printing the required row/whole triangle..
      
class Solution {
    public:
    vector<int> getRow(int rowIndex) {
        vector<vector<int>> dp;
        for(int i=0;i<=rowIndex;i++){
            vector<int> nums(i+1);
            nums[0]=nums[i]=1;
            for(int j=1;j<i;j++)
            nums[j]=dp[i-1][j]+dp[i-1][j-1];
            dp.push_back(nums);
        }
        return dp[rowIndex];
    }
};
