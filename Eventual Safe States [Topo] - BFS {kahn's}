// solving this problem using the Kahn's algorithm [Topo Sort] -> {{BFS}}..
class Solution {
  public:
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        vector<int> indegree(V, 0);
        vector<int> Tadj[V];
        for(int i=0;i<V;i++){
            for(auto it : adj[i]){
               Tadj[it].push_back(i);  
            }
        }
        for(int i=0;i<V;i++){
            for(auto it : Tadj[i])
            indegree[it]++;
        }
        queue<int> q;
        for(int i=0;i<V;i++){
            if(indegree[i]==0)
            q.push(i);
        }
        vector<int> safenodes;
        while(!q.empty()){
           int node = q.front();
           q.pop();
           safenodes.push_back(node);
           for(auto it : Tadj[node]){
               indegree[it]--;
               if(indegree[it]==0)
               q.push(it);
           }
        }
        sort(safenodes.begin(),safenodes.end());
        return safenodes;
    }
};
