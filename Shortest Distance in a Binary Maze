///////////   O(N*M) & O(N*M)   ///////////

int shortestPath(vector<vector<int>> &grid, pair<int, int> source,
                     pair<int, int> destination) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dist(n, vector<int>(m,1e9));
        queue<pair<int,pair<int,int>>> q;    // {dist,row,col}
        if(source.first==destination.first && source.second==destination.second) // base case
        return 0;
        q.push({0,{source.first,source.second}});
        int delrow[] = {-1,0,1,0};
        int delcol[] = {0,1,0,-1};
        while(!q.empty()){
            auto it = q.front();
            q.pop();
            int dis = it.first;
            int row = it.second.first;
            int col = it.second.second;
            for(int i=0;i<4;i++){
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];
                if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m&&grid[nrow][ncol]==1){
                    if(nrow==destination.first && ncol==destination.second){
                    return dis + 1;
                    }
                    if((dis + 1) < dist[nrow][ncol]){
                        dist[nrow][ncol] = dis + 1;
                        q.push({dis+1,{nrow,ncol}});
                    }
                }
            }
        }
        return -1;
    }
