//// Time Complexity & Space same as Merge Sort ////

long long merge(long long arr[], long long low, long long mid, long long high)
    {
        long long left = low;
        long long right = mid + 1;
        vector<long long> temp;
        long long cnt = 0;
        
        while(left <= mid && right <= high){
           if(arr[left] <= arr[right]){
               temp.push_back(arr[left]);
               left++;
           } 
           else{
               temp.push_back(arr[right]);
               right++;
               cnt += (mid - left + 1);
           }
        }
        
        while(left <= mid){
            temp.push_back(arr[left]);
            left++;
        }
        while(right <= high){
            temp.push_back(arr[right]);
            right++;
        }
        
        for(int i = low; i <= high; i++){
            arr[i] = temp[i - low];
        }
        
        return cnt;
    }
    

    long long mergeSort(long long arr[], long long low, long long high)
    {
        long long ans = 0;
        
        if(low == high)
        return ans;
        
        
        long long mid = (low + high)/2;
        
        ans += mergeSort(arr, low, mid);
        ans += mergeSort(arr, mid+1, high);
        
        ans += merge(arr, low, mid, high);
        
        return ans;
    }
    
  
    // Function to count inversions in the array.
    long long int inversionCount(long long arr[], long long N)
    {
        long long inversions = mergeSort(arr, 0, N-1);
        return inversions;
    }
