class Solution {
int dp[12][2][12][12][21];    
private: 
int solve(int currIndex, bool tight, int evenDigitCount, int oddDigitCount, int rem, string s,  int k, bool allZero){
        
        if(currIndex == s.length()){
            return (evenDigitCount == oddDigitCount && rem == 0)?1:0;
        }
        
        if(dp[currIndex][tight][evenDigitCount][oddDigitCount][rem] != -1){
          return dp[currIndex][tight][evenDigitCount][oddDigitCount][rem];  
        } 
        
        int end = tight?(s[currIndex]-'0'):9;

        int count = 0;
        for(int currDigit = 0; currDigit <= end; currDigit++){
            int newRem = (rem*10 + currDigit) % k;
            bool newTight = tight && (currDigit == end);
            bool newAllZero = allZero && (currDigit==0);
            if(currDigit%2 == 0){
                if(newAllZero){
                count += solve(currIndex+1, newTight, evenDigitCount, oddDigitCount, 
                newRem, s, k, newAllZero);
                }
                else{
                count += solve(currIndex+1, newTight, evenDigitCount + 1, oddDigitCount, 
                newRem, s, k, newAllZero);
                }
            }
            else{
                count += solve(currIndex+1, newTight, evenDigitCount, oddDigitCount+1, 
                newRem, s, k, newAllZero);
            }
        }
        
        return dp[currIndex][tight][evenDigitCount][oddDigitCount][rem] = count;
    }
    
    public:
     int numberOfBeautifulIntegers(int low, int high, int k) {
        string s1 = to_string(high);
        string s2 = to_string(low - 1);

        memset(dp, -1, sizeof(dp));
        int ans1 = solve(0, 1, 0, 0, 0, s1, k, 1);
        memset(dp, -1, sizeof(dp));
        int ans2 = solve(0, 1, 0, 0, 0, s2, k, 1);

        return ans1 - ans2;
    }
};
