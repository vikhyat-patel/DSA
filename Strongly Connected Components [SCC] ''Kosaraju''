// find no of SCC, or print the SCC...O(V+E)..& O(V+E)...3 STEPS SOLUTION..

1. sort all the nodes in order of the finishing time in a stack using the DFS. Top element in stack finishes last. (dfs)
2. Reverse the graph and store it in a new adjacency list.
3. Now, use the DFS using the stack with the new adjacency list & count the total SCC. (dsf)

class Solution
{
private:
void dfs(vector<vector<int>> &adj, vector<int> &vis, stack<int> &st, int node){
    vis[node] = true;
    
    for(auto it : adj[node]){
        if(!vis[it]){
            dfs(adj, vis, st, it);
        }
    }
    st.push(node);
}
private:
void dsf(vector<int> Tadj[], vector<int> &visited, int node){
    visited[node] = true;
    
    for(auto it : Tadj[node]){
        if(!visited[it]){
            dsf(Tadj, visited, it);
        }
    }
}
	public:
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        vector<int> vis(V, false);
        stack<int> st;
        
        for(int i = 0; i < V; i++){
            if(!vis[i]){
                dfs(adj, vis, st, i);
            }
        }
      
        vector<int> Tadj[V];
        for(int i = 0; i < V; i++){
            for(auto it : adj[i]){
                Tadj[it].push_back(i);
            }
        }
        
        int scc = 0;
        vector<int> visited(V, false);
        while(!st.empty()){
            int node = st.top();
            st.pop();
            if(!visited[node]){
                dsf(Tadj, visited, node);
                scc++;
            }
        }
        return scc;
    }
};
