class Solution {
public:
int helper(int sum, int idx, vector<int> &coins, int n, vector<vector<int>> &dp)
	{
	    if(sum < 0 || idx == n)
	        return 1e8;
	        
	    if(sum == 0)
	        return 0;
	        
	    if(dp[idx][sum] != -1)
	        return dp[idx][sum];
	        
	    int pick = 1 + helper(sum - coins[idx], idx, coins, n, dp);
	    
	    int not_pick = helper(sum, idx + 1, coins, n, dp);
	    
	    return dp[idx][sum] = min(pick, not_pick);
	}

      int coinChange(vector<int>& coins, int amount) {

      int n = coins.size();

      vector<vector<int>>dp(n + 1, vector<int> (amount + 1, -1));
	    
	    int ans = helper(amount, 0, coins, n, dp);
	    
	    if(ans >= 1e8) return -1;
	    
	    return ans;
    }
};
