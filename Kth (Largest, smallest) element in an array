 int kthSmallest(int arr[], int n, int k) {
        priority_queue<int> pq;     // Max heap
        for(int i=0;i<k;i++){
            pq.push(arr[i]);
        }
        for(int i=k;i<n;i++){
            if(pq.top() > arr[i]){
                pq.pop();
                pq.push(arr[i]);
            } 
        }
        return pq.top();
    }



    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int>> pq;     // Min heap
        for(int i=0;i<k;i++){
            pq.push(nums[i]);
        }
        for(int i=k;i<nums.size();i++){
            if(nums[i] > pq.top()){
            pq.pop();
            pq.push(nums[i]);
            }
        }
        return pq.top();
    }


Time Complexity : O(n * logk)
space Complexity : O(k)






Ques.. Printing the K largest elements in the descending order..

vector<int> kLargest(int arr[], int n, int k) {
	    
	    vector<int> ans;    // It will store the kLargest elements..
	    
	    priority_queue<int, vector<int>, greater<int>> pq;  // Min Heap
        for(int i=0;i<k;i++){
            pq.push(arr[i]);
        }
        for(int i=k;i<n;i++){
            if(arr[i] > pq.top()){
            pq.pop();
            pq.push(arr[i]);
            }
        }
        while(!pq.empty()){
            ans.push_back(pq.top());
            pq.pop();
        }
        reverse(ans.begin(), ans.end());    // to print in decreasing order..
        return ans;
	}
