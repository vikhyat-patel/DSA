//Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    int srow = KnightPos[0]-1;
	    int scol = KnightPos[1]-1;
	    int Trow = TargetPos[0]-1;
	    int Tcol = TargetPos[1]-1;
	    
	    if(srow==Trow && scol==Tcol)   // base case
	    return 0;
	    
	    vector<vector<int>> dist(N, vector<int>(N,1e9));
	    dist[srow][scol] = 0;
	    queue<pair<int,pair<int,int>>> q;   // {dist,row,col}
	    q.push({0,{srow,scol}});
	    int delrow[] = {-2,-2,-1,-1,1,1,2,2};
	    int delcol[] = {-1,1,-2,2,-2,2,-1,1};
	    while(!q.empty()){
	       int steps = q.front().first;
	       int row = q.front().second.first;
	       int col = q.front().second.second;
	       q.pop();
	       for(int i=0;i<8;i++){
	           int nrow = row + delrow[i];
	           int ncol = col + delcol[i];
	           if(nrow>=0&&nrow<N&&ncol>=0&&ncol<N){
	               if(nrow==Trow && ncol==Tcol){
	                   return steps + 1;
	               }
	               if((steps + 1) < dist[nrow][ncol]){
	                   dist[nrow][ncol] = steps + 1;
	                   q.push({steps + 1, {nrow,ncol}});
	               }
	           }
	       }
	    }
	    return -1;
	}
